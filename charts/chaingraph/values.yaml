# Default values for Chaingraph.

# If set, allocate persistent volumes for development. (This is intended for use by developers working directly in the Chaingraph repo.)
useDevelopmentVolumes: false

# Configuration settings for the agent which handles database synchronization in Chaingraph
agent:
  # Manage the Chaingraph agent from this chart.
  enable: true
  # The precise Chaingraph Agent Docker image to use.
  image: chaingraph/agent@sha256:893b00bdf94a0f58d08777b205503daf7b0d565ce44cf54d11047e4729671227 # fd089e4
  # A list of trusted external nodes to which this Chaingraph instance should connect. If specified, this list will be appended to the list of trusted nodes which are managed by this Chaingraph chart.
  # This must be specified using the same format as `CHAINGRAPH_TRUSTED_NODES`, e.g. `bchn:127.0.0.1:8333:mainnet,bchd:127.0.0.1:8334:testnet,another:127.0.0.1:8335:e3e1f3e8`
  externalNodes: ''
  # User-Agent string to share with trusted nodes. If not set, the default `/chaingraph:[version]/` will be used.
  # e.g. CHAINGRAPH_USER_AGENT=/chaingraph-custom:0.0.0/
  userAgent: ''
  # The maximum number of connections the agent should maintain to the database.
  # For best performance, this should be set to the number of CPUs available to Postgres. If not set, Chaingraph will assume that Postgres is running on hardware equivalent to its own. (This is ideal if Postgres is running on either the same machine or an equivalent one from a homogenous Kubernetes node pool.)
  maxConnections: ''
# If set to false, the Postgres database will be configured to use "synchronous_commit = off" during initial sync.
# In real-world testing, this usually reduces the speed of Chaingraph's initial sync, so Chaingraph leaves "synchronous_commit = on" by default.
  synchronousCommit: true
  # The target size (in MB) of the buffer which holds downloaded blocks waiting to be saved to the database. This primarily affects memory usage during the initial chain sync.
  # For best performance, this should be around `maxConnections * maximum block size`, while leaving enough memory available to the host machine. If left unset (recommended), Chaingraph will measure free memory at startup and attempt to select a reasonable value.
  blockBufferTargetSizeMb: ''
  # A mapping of network magic bytes to hex-encoded genesis blocks.
  # Format: `NETWORK_MAGIC:RAW_GENESIS_BLOCK_HEX`, comma separated.
  # E.g. CHAINGRAPH_GENESIS_BLOCKS=e3e1f3e8:rawblockhex,deadbeef:rawblockhex
  genesisBlocks: 'e3e1f3e8:0100000000000000000000000000000000000000000000000000000000000000000000003ba3edfd7a7b12b27ac72c3e67768f617fc81bc3888a51323a9fb8aa4b1e5e4a29ab5f49ffff001d1dac2b7c0101000000010000000000000000000000000000000000000000000000000000000000000000ffffffff4d04ffff001d0104455468652054696d65732030332f4a616e2f32303039204368616e63656c6c6f72206f6e206272696e6b206f66207365636f6e64206261696c6f757420666f722062616e6b73ffffffff0100f2052a01000000434104678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5fac00000000,dab5bffa:0100000043497fd7f826957108f4a30fd9cec3aeba79972084e90ead01ea330900000000bac8b0fa927c0ac8234287e33c5f74d38d354820e24756ad709d7038fc5f31f020e7494dffff001d03e4b6720101000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0e0420e7494d017f062f503253482fffffffff0100f2052a010000002321021aeaf2f8638a129a3156fbe7e5ef635226b0bafd495ff03afe2c843d7e3a4b51ac00000000,e2b7daaf:0100000000000000000000000000000000000000000000000000000000000000000000003ba3edfd7a7b12b27ac72c3e67768f617fc81bc3888a51323a9fb8aa4b1e5e4af1a93c5fffff001d01d3cd060101000000010000000000000000000000000000000000000000000000000000000000000000ffffffff4d04ffff001d0104455468652054696d65732030332f4a616e2f32303039204368616e63656c6c6f72206f6e206272696e6b206f66207365636f6e64206261696c6f757420666f722062616e6b73ffffffff0100f2052a01000000434104678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5fac00000000'
  # The port at which the agent's internal API will listen.
  port: 3200
  # The minimum log level to print to STDOUT. May be `trace`, `debug`, `info`, `warn`, `error`, or `fatal`.
  logLevel: 'debug'

# Configuration settings for the built-in Bitcoin Cash Node
bitcoinCashNode:
  # Enable a local Bitcoin Cash Node.
  enable: false
  # The precise Bitcoin Cash Node Docker image to use.
  image: chaingraph/bitcoin-cash-node@sha256:22953e5405fac603fdeb925159639992b426b0b98583509fd40de335dbda329f # v27.0.0
  # The size of the volume to provision for Bitcoin Cash Node.
  volumeSize:  250Gi

# Configuration settings for the built-in Bitcoin Cash Node (Testnet4)
bitcoinCashNodeTestnet:
  # Enable a local Bitcoin Cash Node in Testnet4 mode.
  enable: true
  # The precise Bitcoin Cash Node (Testnet4) Docker image to use. If not set, the value for bitcoinCashNode.image will be used.
  image: ''
  # The size of the volume to provision for Bitcoin Cash Node.
  volumeSize: 2Gi

# Configuration settings for the built-in Bitcoin Cash Node (Chipnet)
bitcoinCashNodeChipnet:
  # Enable a local Bitcoin Cash Node in Chipnet mode.
  enable: true
  # The precise Bitcoin Cash Node (Chipnet) Docker image to use. If not set, the value for bitcoinCashNode.image will be used.
  image: ''
  # The size of the volume to provision for Bitcoin Cash Node.
  volumeSize: 2Gi

# Configuration settings for the Postgres database to be used by Chaingraph
postgres:
  # If not set, a simple, internal, single-instance Postgres database will be used.
  #
  # It's recommended this be configured to use a managed, highly-available external Postgres database for uptime-critical applications.
  # For development and lower-cost applications, the default, built-in Postgres instance is ideal.
  externalDbUrl: ''
  # The precise Postgres Docker image to use.
  # This is only used if `externalDbUrl` is not set.
  image: postgres@sha256:818389c4425c2d90c10d69ba10dce677b04df51dfb2d53bc553981be5705af55 # v14.6
  # The Postgres username to use.
  # NOTE: this can only be configured from the chart during database creation. If the database already exists, the Postgres username/password must be created or updated manually before changing this value.
  # This is only used if `externalDbUrl` is not set.
  username: 'chaingraph'
  # The Postgres password to use. If not provided, a random secret will be generated and stored in the cluster.
  # NOTE: this can only be configured from the chart during database creation. If the database already exists, the Postgres username/password must be created or updated manually before changing this value.
  # This is only used if `externalDbUrl` is not set.
  password: ''
  # The size of the volume to provision for the internal Postgres database.
  # This is only used if `externalDbUrl` is not set.
  volumeSize: 5Gi
  # The memory available to the kubernetes node intended for running the Postgres database (ideally, the highest-resource node in the cluster).
  # This is only used if `externalDbUrl` is not set.
  memoryGb: 1
  # The number of CPUs available to the kubernetes node intended for running the Postgres database (ideally, the highest-resource node in the cluster).
  # This is only used if `externalDbUrl` is not set.
  cpus: 1
  # The storageClassName to use for Postgres' PersistentVolumeClaimTemplate. If not set, the default StorageClass for cluster will be used.
  # Depending on the provider, this can be configured to ensure SSD storage is allocated to Postgres. For example, GKE uses the storageClassName `premium-rwo`.
  storageClassName: ''

hasura:
  # Enable a local Hasura deployment. Disable this to either manage Hasura manually or use Hasura Cloud.
  enable: true
  # The precise Hasura Docker image to use.
  image: chaingraph/hasura@sha256:a471bacc17479111a73c02e9b7bc178b15f48c25192322edc1ec7e8cc2d866cb # 91bef77
  # A secret key used to secure admin access in Hasura. If not provided, a random secret will be generated and stored in the cluster.
  adminSecretKey: ''
  # Enable the console served by Hasura. (Not recommended; use Hasura CLI's `hasura console` instead.)
  enableConsole: false
  # A Postgres connection string to override the default connection string (used by the agent).
  # This is useful for e.g. setting a hasura-specific Postgres user with lower `statement_timeout` limits.
  overrideDbUrl: ''
  # An alternative Postgres database URL in which Hasura metadata should be stored. If not set, metadata will be stored in the configured Postgres database.
  metadataDbUrl: ''
  # Configure the port of the Hasura service. Defaults to 80.
  servicePort: 80
  # Configure a load balancer to serve the GraphQL API at port 80. Disabled by default because most cloud providers charge a monthly price for load balancer usage, and Chaingraph can be tested or used for development without load balancing.
  # NOTE: it is recommended that this be enabled for production usage if Hasura is being managed internally by Chaingraph and another load balancer is not configured.
  useLoadBalancer: false
  # Enable enforcement of the configured allow-list. While this is disabled for simplicity during development, it is important for hardening production APIs against maliciously expensive queries.
  enableAllowList: false
  # If set, the `WEBHOOK_HANDLER_BASE_URL` environment variable will be configured to this value. By default, this will be set to the URL of the agent's internal API.
  # E.g. to expose a locally-running agent to this hasura instance, try: `http://host.docker.internal:3200`
  webhookHandlerBaseUrl: ''

pgAdmin:
  # Enable a local pgAdmin installation. (This should only be used during development.)
  enable: false
  # The precise pgAdmin Docker image to use (only used if `pgAdmin.enable` is `true`).
  image: dpage/pgadmin4@sha256:2efd6d20c528e939f28257bdb0160b3907a677151199a11a4e72c9704697ab70 #v6.20
  # The size of the volume to provision for pgAdmin (only used if `pgAdmin.enable` is `true`).
  volumeSize: 10Gi
  # The admin email/username used to log in to pgAdmin
  adminEmail: 'admin@chaingraph.cash'
  # The admin password used to log in to pgAdmin
  adminPassword: 'very_insecure_pgadmin_password'

pgHero:
  # Enable a local pgHero installation. (This should only be used during development.)
  # NOTE: pgHero configuration requires postgres.password to be defined. (It will not read from chaingraph-secrets.)
  # To enable pgHero for an existing database which uses chaingraph-secrets, export data.postgresPassword and set postgres.password manually.
  enable: false
  # The precise pgHero Docker image to use (only used if `pgAdmin.enable` is `true`).
  image: ankane/pghero@sha256:2a3e8ea357b5256590510322f4c25ea2ed070c4b284ea2967dee014aa9597c96 #v3.1.0
