These notes provide important details about your Chaingraph configuration, consider saving them for future reference.

--- Management Tips ---
View release info (including these notes): $ helm status {{ .Release.Name }}
List my kubernetes clusters: $ kubectl config get-contexts
Useful info: $ kubectl cluster-info
View status of pods: $ kubectl get pods
Get pod details: $ kubectl describe pod hasura
Tail pod logs: $ kubectl logs -f bitcoin-cash-node-0

For more, see: https://kubernetes.io/docs/reference/kubectl/cheatsheet/
{{ if .Values.useDevelopmentVolumes }}
--- Development Volumes ---
Development volumes are enabled. You'll find each volume listed in the `data` directory.
{{ end }}
--- Chaingraph Agent ---
{{- if .Values.agent.enable }}
enabled (managed internally)

CHAINGRAPH_TRUSTED_NODES: {{ include "chaingraph.trustedNodes" . }}
{{ else }}
disabled (managed externally)
{{ end }}
--- Internal Trusted Nodes ---
{{ if .Values.bitcoinCashNode.enable -}}
  Bitcoin Cash Node (mainnet):  enabled (requested volume size: {{ .Values.bitcoinCashNode.volumeSize }}, image: {{ .Values.bitcoinCashNode.image }})
{{ else -}}
  Bitcoin Cash Node (mainnet):  disabled
{{ end -}}
{{ if .Values.bitcoinCashNodeTestnet.enable -}}
  Bitcoin Cash Node (testnet4): enabled (requested volume size: {{ .Values.bitcoinCashNodeTestnet.volumeSize }}, image: {{ .Values.bitcoinCashNodeTestnet.image | default .Values.bitcoinCashNode.image }})
{{ else -}}
  Bitcoin Cash Node (testnet4): disabled
{{ end -}}
{{ if .Values.bitcoinCashNodeChipnet.enable -}}
  Bitcoin Cash Node (chipnet):  enabled (requested volume size: {{ .Values.bitcoinCashNodeChipnet.volumeSize }}, image: {{ .Values.bitcoinCashNodeChipnet.image | default .Values.bitcoinCashNode.image }})
{{ else -}}
  Bitcoin Cash Node (chipnet):  disabled
{{ end }}
{{- if .Values.postgres.externalDbUrl }}
--- External Postgres Database ---
Chaingraph has been configured to use an externally-managed postgres database:
{{ .Values.postgres.externalDbUrl }}
{{ else }}
--- Internal Postgres Database ---
Chaingraph has been configured to use an internally-managed postgres database. This is typically easier and less expensive, but may not be suitable for applications requiring high availability. (For details, see the documentation for 'postgres.externalDbUrl'.)

To forward the postgres port locally, run:
```
kubectl port-forward postgres-0 5432:5432
```
{{ if .Values.postgres.password }}
You'll then be able to connect to the database locally:
postgres://{{ .Values.postgres.username }}:{{ .Values.postgres.password }}@localhost:5432/chaingraph
{{ else }}
You'll then be able to connect to the database locally:
postgres://{{ .Values.postgres.username }}:POSTGRES_PASSWORD@localhost:5432/chaingraph

To get the configured, randomly-generated POSTGRES_PASSWORD, inspect chaingraph-secrets:
```
{{`kubectl get secret chaingraph-secrets -o go-template='{{range $k,$v := .data}}{{"### "}}{{$k}}{{"\n"}}{{$v|base64decode}}{{"\n\n"}}{{end}}'`}}
```
{{ end }}
{{- if .Release.IsUpgrade -}}
If you're upgrading an existing internal Postgres database, any changes to the Postgres username or password cannot be made by Helm â€“ you'll need to manually ALTER USER in the database.

Additionally, Helm cannot tune an existing Postgres database (postgres.memoryGb and postgres.cpus). Below are the tuning settings Helm applied if this upgrade created a new internal Postgres database; to tune an existing database, apply these changes manually and restart the server (using `kubectl scale statefulsets postgres --replicas=0 && kubectl rollout status statefulset/postgres && kubectl scale statefulsets postgres --replicas=1`):
{{ else }}
Since this is the first time you've installed Chaingraph, the following settings were automatically applied:
{{ end -}}
```
{{ include "chaingraph.postgres.init-db-config" . }}
```
{{ end }}
--- Hasura ---
{{ if .Values.hasura.adminSecretKey -}}
  Hasura Admin Secret Key: {{ .Values.hasura.adminSecretKey }}
{{ else -}}
To get the configured, randomly-generated "Hasura Admin Secret Key", inspect chaingraph-secrets:
```
{{`kubectl get secret chaingraph-secrets -o go-template='{{range $k,$v := .data}}{{"### "}}{{$k}}{{"\n"}}{{$v|base64decode}}{{"\n\n"}}{{end}}'`}}
```
{{ end }}
{{- if .Values.hasura.enableConsole }}
The hosted Hasura Console is enabled. (Not recommended; use Hasura CLI's `hasura console` instead.) To access it locally, run:
```
kubectl port-forward $(kubectl get pod -l app=hasura -o jsonpath=\"{.items[0].metadata.name}\") 8080:8080
```
Then visit: http://localhost:8080/
{{ end }}
{{- if .Values.pgAdmin.enable }}
--- pgAdmin ---
pgAdmin is enabled. To access it locally, run:
```
yarn dev-cluster:port-forward:pgadmin
```
Then visit: http://localhost:8081/
email/username: {{ .Values.pgAdmin.adminEmail }}
password: {{ .Values.pgAdmin.adminPassword }}

On first access, you'll need to create a new server connection:
{{ if .Values.postgres.externalDbUrl }}{{ .Values.postgres.externalDbUrl }}{{ else }}
Host name/address: {{ print "postgres-service." .Release.Namespace ".svc.cluster.local" }}
Port: 5432
Username: {{ .Values.postgres.username }}
password: {{ .Values.postgres.password | default "[ see above note on inspecting chaingraph-secrets ]" }}
{{ end }}
{{ end }}
{{- if .Values.pgAdmin.enable }}
--- pgHero ---
pgHero is enabled. To access it locally, run:
```
yarn dev-cluster:port-forward:pghero
```
Then visit: http://localhost:8082/
{{ end }}
--- API ---
Chaingraph's GraphQL API is listening at: /v1/graphql
{{- if .Values.hasura.useLoadBalancer }}
A load balancer has been provisioned; it may take a few minutes for the LoadBalancer IP to be available. You can watch the status by running:
```
kubectl get --namespace {{ .Release.Namespace }} svc -w hasura-service
```

Once the load balancer is ready, you can get the IP address by running:
```
kubectl get svc --namespace {{ .Release.Namespace }} hasura-service --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}"
```

To configure a domain name, create a new A record in your domain's DNS settings with a value set to the retrieved IP address, e.g.:

NAME                    TYPE   VALUE
-------------------------------------------
api.example.com.        A      192.0.2.34

This would make your API available at: api.example.com/v1/graphql
{{- else }}
A load balancer has not been provisioned; this can be less expensive on many cloud providers, but a load balancer is recommended for production applications.

To get the URL for your API, run:

```
export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services hasura-service)
export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[?(@.type=='ExternalIP')].address}")
echo http://$NODE_IP:$NODE_PORT/v1/graphql
```

Note, you may need to create a firewall rule to allow TCP traffic on the configured node port. Check your kubernetes provider's documentation for guidance on exposing Kubernetes services of type "NodePort". Additionally, depending on your kubernetes provider, the external IP of your API may change, particularly when a kubernetes node is replaced (e.g. during upgrades).

To configure a domain name, create a new A record in your domain's DNS settings with a value set to the retrieved IP address, e.g.:

NAME                    TYPE   VALUE
-------------------------------------------
api.example.com.        A      192.0.2.34

This would make your API available at: api.example.com:$NODE_PORT/v1/graphql
{{ if .Values.useDevelopmentVolumes }}
Note: it seems like you're using the Chaingraph repo. If you're using k3d, the API is simply at localhost:
http://localhost:31933/v1/graphql
{{ end }}
{{- end }}

--- Security ---
{{ if .Values.hasura.enableAllowList -}}
Hasura Allow-List is enabled. Only configured GraphQL queries will be allowed without an admin secret key.
{{- else }}
**WARNING: Hasura Allow-List is disabled.**

Unless you've customized schema permissions, most read-only queries will be allowed. This is useful for development, but it is typically not safe for production use cases without additional hardening.

If this installation is intended for production use, an allow-list is recommended.
{{- end }}

---

..............................................................
:    ____ _           _                             _        :
:   / ___| |__   __ _(_)_ __   __ _ _ __ __ _ _ __ | |__     :
:  | |   | '_ \ / _` | | '_ \ / _` | '__/ _` | '_ \| '_ \    :
:  | |___| | | | (_| | | | | | (_| | | | (_| | |_) | | | |   :
:   \____|_| |_|\__,_|_|_| |_|\__, |_|  \__,_| .__/|_| |_|   :
:                             |___/          |_|             :
:............................................................:

Chaingraph version {{ .Chart.Version }} was {{ if .Release.IsUpgrade }}upgraded{{ else }}installed{{ end }} successfully ðŸš€

Above are some notes about your configuration. Consider printing them to a file for future reference:
$ helm status {{ .Release.Name }} > notes-{{ .Release.Name }}.txt
