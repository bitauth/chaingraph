{{- if not .Values.postgres.externalDbUrl }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  labels:
    app: postgres
    {{- include "chaingraph.labels" . | nindent 4 }}
spec:
  serviceName: postgres-service
  replicas: 1
  selector:
    matchLabels:
      app: postgres
      {{- include "chaingraph.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        app: postgres
        {{- include "chaingraph.selectorLabels" . | nindent 8 }}
    spec:
      volumes:
      - name: postgres-dev-shm # https://stackoverflow.com/a/67144103/1326803
        emptyDir:
          medium: Memory
      - name: postgres-initdb-scripts
        configMap:
          defaultMode: 0644
          name: postgres-initdb-scripts-configmap
      containers:
      - name: postgres
        image: {{ .Values.postgres.image }}
        # TODO: this is not a great way to ensure postgres is assigned to the cluster's best node (results in higher bills on cloud providers). Need a better strategy.
        # resources:
          # requests:
          #   memory: "{{ .Values.postgres.memoryGb }}Gi"
          #   cpu: "{{ .Values.postgres.cpus }}"
        env:
          - name: PGDATA
            value: /data
          - name: POSTGRES_DB
            value: chaingraph
          - name: POSTGRES_USER
            value: {{ .Values.postgres.username }}
          - name: POSTGRES_PASSWORD
          {{ if .Values.postgres.password }}
            value: {{ .Values.postgres.password }}
          {{ else }}
            valueFrom:
              secretKeyRef:
                name: chaingraph-secrets
                key: postgresPassword
          {{ end }}
          - name: POSTGRES_HOST_AUTH_METHOD
            value: scram-sha-256
          - name: POSTGRES_INITDB_ARGS
            value: --auth=scram-sha-256
        livenessProbe:
          exec:
            command: ["/bin/sh", "-c", "exec pg_isready -U chaingraph -d chaingraph -h 127.0.0.1 -p 5432"]
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
        readinessProbe:
          exec:
            command: ["/bin/sh", "-c", "-e", "exec pg_isready -U chaingraph -d chaingraph -h 127.0.0.1 -p 5432"]
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
        ports:
          - containerPort: 5432
            name: postgres
        volumeMounts:
          - name: postgres-volume
            mountPath: /data
            {{- if not .Values.useDevelopmentVolumes }} # https://github.com/rancher/k3d/issues/765
            subPath: postgres
            {{ end }}
          - name: postgres-dev-shm
            mountPath: /dev/shm
          - name: postgres-initdb-scripts
            mountPath: /docker-entrypoint-initdb.d
  volumeClaimTemplates:
  - metadata:
      name: postgres-volume
    spec:
      {{- if .Values.postgres.storageClassName }}
      storageClassName: {{ .Values.postgres.storageClassName }}
      {{- end }}
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: {{ .Values.postgres.volumeSize }}
      {{- if .Values.useDevelopmentVolumes }}
      volumeName: postgres-volume
      {{- end }}
{{- end }}
